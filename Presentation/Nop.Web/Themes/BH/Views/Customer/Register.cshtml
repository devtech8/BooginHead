@model RegisterModel
@using Nop.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
             var selectedItem = $(this).val();
             var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });

            // Sorry for the cut-n-paste duplication
            $("#@Html.FieldIdFor(model => model.ShippingCountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.ShippingStateProvinceId)");
                var statesProgress = $("#shipping-states-loading-progress");
                statesProgress.show();
                $.ajax({
                        cache: false,
                        type: "GET",
                        url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                        data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });

            $('#RegisterAsWholesaler').click(function () {
                if (this.checked)
                    $('.wholesale-field').show();
                else
                    $('.wholesale-field').hide();
            });
        });
    </script>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="page registration-page">
        <div class="page-title">
            <h1>@T("Account.Register")</h1>
        </div>
        <div class="page-body">
            <div class="message-error">
                @Html.ValidationSummary(true)
            </div>
            @Html.Partial("_ExternalAuthentication.AssociateMessage")

            <div class="fieldset">
                <div class="title">
                    <strong>Registration Type</strong>
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.RegisterAsWholesaler, "I want to register as a wholesaler")
                    @Html.EditorFor(model => model.RegisterAsWholesaler)
                    @Html.ValidationMessageFor(model => model.RegisterAsWholesaler)
                </div>
            </div>
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-fields">
                    @if (Model.GenderEnabled)
                    {
                        <div class="inputs">
                            <label>@T("Account.Fields.Gender"):</label>
                            <span class="gender">
                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                                <span class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</span>
                            </span>
                            <span class="gender">
                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                <span class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</span>
                            </span>
                        </div>
                    }
                    <div class="inputs">
                        @Html.LabelFor(model => model.FirstName, new { }, ":")
                        @Html.EditorFor(model => model.FirstName)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.LastName, new { }, ":")
                        @Html.EditorFor(model => model.LastName)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                    @if (Model.DateOfBirthEnabled)
                    {
                        <div class="inputs">
                            <label>@T("Account.Fields.DateOfBirth"):</label>
                            @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                            Html.FieldNameFor(x => x.DateOfBirthMonth),
                            Html.FieldNameFor(x => x.DateOfBirthYear),
                            DateTime.Now.Year - 110,
                            DateTime.Now.Year,
                            Model.DateOfBirthDay,
                            Model.DateOfBirthMonth,
                            Model.DateOfBirthYear)
                            @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                            @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                            @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                        </div>
                    }
                    <div class="inputs">
                        @Html.LabelFor(model => model.Email, new { }, ":")
                        @Html.EditorFor(model => model.Email)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    @if (Model.UsernamesEnabled)
                    {
                        <div class="inputs">
                            @Html.LabelFor(model => model.Username, new { }, ":")
                            @Html.EditorFor(model => model.Username)
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Username)
                            @if (Model.CheckUsernameAvailabilityEnabled)
                        {
                                @Html.Partial("_CheckUsernameAvailability")
                        }
                        </div>

                    }
                </div>
            </div>
            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <div class="fieldset wholesale-field" style="display:none">
                    <div class="title">
                        <strong>@T("Account.CompanyDetails")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.CompanyEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.Company, new { }, ":")
                                @Html.EditorFor(model => model.Company)
                                @if (Model.CompanyRequired)
                                {
                                    @Html.RequiredHint()
                                }
                                @Html.ValidationMessageFor(model => model.Company)
                            </div>
                        }
                        @if (Model.DisplayVatNumber)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.VatNumber, new { }, ":")
                                @Html.EditorFor(model => model.VatNumber)&nbsp;&nbsp;&nbsp;@Model.VatNumberStatusNote
                                <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
            || Model.CityEnabled || Model.CountryEnabled)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourAddress")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.StreetAddressEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.StreetAddress, new { }, ":")
                                @Html.EditorFor(model => model.StreetAddress)
                                @if (Model.StreetAddressRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.StreetAddress)
                            </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.StreetAddress2, new { }, ":")
                                @Html.EditorFor(model => model.StreetAddress2)
                                @if (Model.StreetAddress2Required)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.StreetAddress2)
                            </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                                @Html.EditorFor(model => model.ZipPostalCode)
                                @if (Model.ZipPostalCodeRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.ZipPostalCode)
                            </div>
                        }
                        @if (Model.CityEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.City, new { }, ":")
                                @Html.EditorFor(model => model.City)
                                @if (Model.CityRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.City)
                            </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.CountryId, new { }, ":")
                                @Html.DropDownList("CountryId", Model.AvailableCountries)
                            </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                                @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                                <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
            || Model.CityEnabled || Model.CountryEnabled)
            {
                <div class="fieldset wholesale-field" style="display:none">
                    <div class="title">
                        <strong>Shipping Address</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.StreetAddressEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ShippingStreetAddress, new { }, ":")
                                @Html.EditorFor(model => model.ShippingStreetAddress)
                                @if (Model.StreetAddressRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.ShippingStreetAddress)
                            </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ShippingStreetAddress2, new { }, ":")
                                @Html.EditorFor(model => model.ShippingStreetAddress2)
                                @if (Model.StreetAddress2Required)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.ShippingStreetAddress2)
                            </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ShippingZipPostalCode, new { }, ":")
                                @Html.EditorFor(model => model.ShippingZipPostalCode)
                                @if (Model.ZipPostalCodeRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.ShippingZipPostalCode)
                            </div>
                        }
                        @if (Model.CityEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ShippingCity, new { }, ":")
                                @Html.EditorFor(model => model.ShippingCity)
                                @if (Model.CityRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.ShippingCity)
                            </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ShippingCountryId, new { }, ":")
                                @Html.DropDownList("ShippingCountryId", Model.AvailableCountries)
                            </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.ShippingStateProvinceId, new { }, ":")
                                @Html.DropDownList("ShippingStateProvinceId", Model.AvailableStates)
                                <span id="shipping-states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourContactInformation")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.PhoneEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.Phone, new { }, ":")
                                @Html.EditorFor(model => model.Phone)
                                @if (Model.PhoneRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.Phone)
                            </div>
                        }
                        @if (Model.FaxEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.Fax, new { }, ":")
                                @Html.EditorFor(model => model.Fax)
                                @if (Model.FaxRequired)
                            {
                                    @Html.RequiredHint()
                            }
                                @Html.ValidationMessageFor(model => model.Fax)
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="fieldset wholesale-field" style="display:none">
                <div class="title"><strong>Wholesaler Information</strong></div>
                <div class="form-fields">
                    <div class="inputs">
                        @Html.LabelFor(model => model.TaxId, "TIN or EIN:")
                        @Html.EditorFor(model => model.TaxId)
                        @Html.ValidationMessageFor(model => model.TaxId)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.WebsiteURL, "Website URL:")
                        @Html.EditorFor(model => model.WebsiteURL)
                        @Html.ValidationMessageFor(model => model.WebsiteURL)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.International, "International:")
                        @Html.EditorFor(model => model.International)
                        @Html.ValidationMessageFor(model => model.International)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.HowDidYouHear, "How did you hear about Booginhead?")
                        @Html.EditorFor(model => model.HowDidYouHear)
                        @Html.ValidationMessageFor(model => model.HowDidYouHear)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.YearsInBusiness, "Years in business:")
                        @Html.DropDownList("YearsInBusiness", new SelectList(Model.YearsInBusinessOptions, "Value", "Text", Model.YearsInBusiness))
                        @Html.ValidationMessageFor(model => model.YearsInBusiness)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.StoreFront, "Storefront:")
                        @Html.DropDownList("StoreFront", new SelectList(Model.StorefrontOptions, "Value", "Text", Model.StoreFront))
                        @Html.ValidationMessageFor(model => model.StoreFront)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.TypeOfStore, "Type of store")
                        @Html.EditorFor(model => model.TypeOfStore)
                        @Html.ValidationMessageFor(model => model.TypeOfStore)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.NameOfWebStore, "Name of web store:")
                        @Html.EditorFor(model => model.NameOfWebStore)
                        @Html.ValidationMessageFor(model => model.NameOfWebStore)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.AmazonSellerName, "Amazon seller name:")
                        @Html.EditorFor(model => model.AmazonSellerName)
                        @Html.ValidationMessageFor(model => model.AmazonSellerName)
                    </div>
                </div>
            </div>
            @if (Model.NewsletterEnabled)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.Options")</strong>
                    </div>
                    <div class="form-fields">
                        <div class="inputs">
                            @Html.LabelFor(model => model.Newsletter, new { }, ":")
                            @Html.EditorFor(model => model.Newsletter)
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
                    </div>
                </div>
            }
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.Preferences")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.AllowCustomersToSetTimeZone)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.TimeZoneId, new { }, ":")
                                @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                                @Html.ValidationMessageFor(model => model.TimeZoneId)
                            </div>
                        }
                    </div>
                </div>
            }
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPassword")</strong>
                </div>
                <div class="form-fields">
                    <div class="inputs">
                        @Html.LabelFor(model => model.Password, new { }, ":")
                        @Html.EditorFor(model => model.Password)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>
                    <div class="inputs">
                        @Html.LabelFor(model => model.ConfirmPassword, new { }, ":")
                        @Html.EditorFor(model => model.ConfirmPassword)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            @Html.Raw(Html.GenerateCaptcha())
                        </div>
                    }
                </div>
            </div>
            @if (Model.AcceptPrivacyPolicyEnabled)
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#register-button').click(function () {
                            if ($('#accept-privacy-policy').is(':checked')) {
                                //do some stuff
                                return true;
                            }
                            else {
                                //just show validation errors, dont post
                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                return false;
                            }
                        });
                    });
                </script>
                <div class="accept-privacy-policy">
                    <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                    <label for="accept-privacy-policy">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                    <a class="read" href='@Url.RouteUrl("Topic", new { SystemName = "privacyinfo" })'>@T("Account.Fields.AcceptPrivacyPolicy.Read")</a>
                </div>
            }
            <div class="fieldset wholesale-field" style="display:none;">
                <div class="title">
                    <strong>Wholesale Terms and Conditions</strong>
                </div>
                <div style="width:60%; height: 200px; overflow: auto;">
                    <p><strong>Terms and Conditions</strong></p>
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris scelerisque nec tortor eget elementum. Vivamus sollicitudin mi et leo elementum, accumsan blandit eros iaculis. Integer mollis nibh lacus, in laoreet est euismod id. Nullam erat nunc, egestas at auctor in, commodo vel nisl. Vivamus dapibus, metus ut ullamcorper dictum, elit quam vehicula sapien, a semper nibh erat ut neque. Cras varius diam at cursus hendrerit. Mauris vehicula, turpis non congue tempor, felis elit sollicitudin turpis, ut hendrerit nisi neque a ipsum. Integer non accumsan odio. Pellentesque sed molestie felis. Nunc quis neque et ligula scelerisque interdum. Maecenas a turpis mattis, molestie ligula eget, accumsan neque. In nibh metus, accumsan tempor aliquam non, feugiat quis quam. Praesent ultricies dapibus quam. Quisque convallis et est sed rutrum. Nulla a varius urna.</p>
                    <p>Vivamus vel dolor faucibus, elementum sem at, suscipit leo. Nam mattis urna nec ante scelerisque, non varius sem mollis. Donec non fermentum nisi, vitae eleifend augue. Nunc augue enim, luctus a ipsum sed, pellentesque blandit lectus. Vestibulum consequat ante eget massa mollis, sit amet vestibulum tortor rutrum. Aenean eget eleifend odio. Aliquam tincidunt risus metus, non scelerisque arcu vestibulum id. Aenean at sapien eget massa interdum vehicula ut at dolor. Vestibulum sed mauris rutrum, suscipit nisl in, eleifend dolor. Aliquam rhoncus, eros quis interdum egestas, justo mauris tincidunt nibh, vel sollicitudin risus nibh non ipsum. Quisque sed dolor et neque rutrum sodales.</p>
                    <p>Aliquam erat odio, consectetur at augue a, ultricies mollis nulla. Nam tempus sed arcu vestibulum molestie. Donec tincidunt justo sit amet adipiscing luctus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vitae ligula at metus bibendum placerat. In vitae metus non magna posuere viverra eget id tellus. Curabitur pharetra justo at felis ullamcorper, at gravida diam congue.</p>
                    <p>Vestibulum sollicitudin est id porta adipiscing. Ut placerat condimentum tortor in ornare. Nulla est libero, fringilla vel orci a, iaculis accumsan dolor. Sed elementum posuere tellus, sed aliquam felis mollis id. Suspendisse posuere accumsan risus, quis viverra turpis. Integer in velit diam. Sed eget elit libero. Praesent et risus nec elit eleifend congue. Etiam dignissim placerat dignissim. Praesent tristique pulvinar pretium. Sed cursus augue erat, quis faucibus odio ultricies id. Quisque in ligula quam. Donec a sodales erat, vel varius magna. Integer congue lacus tincidunt, aliquam turpis nec, fringilla lacus. Vivamus ornare elementum dui.</p>
                    <p>Cras eget nulla nec tortor commodo vehicula vel id urna. Pellentesque odio diam, viverra at iaculis at, placerat id purus. Ut tempor facilisis neque at pellentesque. Pellentesque nulla dolor, placerat in eros nec, pulvinar dignissim risus. In ullamcorper mollis fringilla. Nullam posuere diam eu nisi pretium sagittis. Cras congue, ligula ut sollicitudin condimentum, metus lorem fermentum ipsum, in tincidunt neque massa ut felis. Ut tempus orci eget sapien suscipit, vitae varius ligula sodales. Nunc consequat felis volutpat imperdiet rutrum. Proin vel interdum nibh, nec mattis lorem. Fusce luctus massa et sem aliquet congue. Aenean varius lectus id nulla facilisis consectetur.</p>
                </div>
                <div class="form-fields">
                    <div class="inputs">
                        @Html.LabelFor(model => model.AcceptedTerms, "I accept the terms and conditions")
                        @Html.EditorFor(model => model.AcceptedTerms)
                        @Html.ValidationMessageFor(model => model.AcceptedTerms)
                    </div>
                </div>
            </div>

            <div class="buttons">
                <input type="submit" id="register-button" class="button-1 register-next-step-button" value="@T("Account.Register.Button")" name="register-button" />
            </div>
        </div>
    </div>
}